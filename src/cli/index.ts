import meow from 'meow';
import inquirer from 'inquirer';
import { InquirerAnswerTypes } from '../types';
import { expandedFiles } from '../utils.js';
import { defaultOutputFolder } from '../constants.js';
import { runTransformsOnChromeRecording } from '../transform.js';

const cli = meow(
  `
  Usage
    $ npx katalon-chrome-recorder <path-of-recording.json> [options]

  Options

    -d,  --dry            Dry run the output of the transformed recordings
    -o,  --output         Output location of the files generated by the exporter

  Examples

    $ npx katalon-chrome-recorder recordings.json
    $ npx katalon-chrome-recorder recordings/*.json
`,
  {
    importMeta: import.meta,
    flags: {
      dry: {
        type: 'boolean',
      },
      output: {
        type: 'string',
        alias: 'o',
      },
    },
  },
);

inquirer
  .prompt([
    {
      type: 'input',
      name: 'files',
      message:
        'Which directory or files should be translated from Recorder JSON to Katalon?',
      when: () => !cli.input.length,
      default: '.',
      filter(files: string) {
        return new Promise((resolve) => {
          resolve(files.split(/\s+/).filter((f) => f.trim().length > 0));
        });
      },
    },
    {
      type: 'input',
      name: 'outputPath',
      message: 'Where should be exported files to be output?',
      when: () => !cli.input.length,
      default: 'katalon',
    },
  ])
  .then((answers: InquirerAnswerTypes) => {
    const { files: recordingFiles, outputPath: outputFolder } = answers;
    const files = cli.input.length ? cli.input : recordingFiles;
    const filesExpanded = expandedFiles(files);

    if (!filesExpanded) {
      console.log(`No recording files found matching ${files.join(' ')}`);
      return null;
    }

    const outputPath = cli.flags?.output?.length
      ? cli.flags.output
      : outputFolder;

    return runTransformsOnChromeRecording({
      files: filesExpanded,
      outputPath: outputPath ?? defaultOutputFolder,
      flags: cli.flags,
    });
  })
  .catch((error) => {
    if (error.isTtyError) {
      // Prompt couldn't be rendered in the current environment
    } else {
      console.error(error);
    }
  });
